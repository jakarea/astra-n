// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core Tables: Users & Integrations

model User {
  id            String   @id @db.Uuid
  name          String
  email         String?  @unique
  role          String   @default("seller") // 'admin' or 'seller'
  webhookSecret String?  @unique @map("webhook_secret")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  settings     UserSettings?
  integrations Integration[]
  products     Product[]
  crmLeads     CrmLead[]
  leadEvents   CrmLeadEvent[]

  @@map("users")
}

model UserSettings {
  userId         String   @id @map("user_id") @db.Uuid
  telegramChatId String?  @map("telegram_chat_id")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Integration {
  id               Int      @id @default(autoincrement())
  userId           String   @map("user_id") @db.Uuid
  name             String
  type             String   // 'shopify', 'woocommerce', 'wordpress'
  domain           String   @unique
  baseUrl          String?  @map("base_url")
  webhookSecret    String?  @map("webhook_secret")
  adminAccessToken String?  @map("admin_access_token")
  isActive         Boolean  @default(true) @map("is_active")
  status           String   @default("active") // 'active', 'inactive', 'error'
  lastSyncAt       DateTime? @map("last_sync_at")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@index([userId])
  @@index([domain])
  @@index([type])
  @@index([status])
  @@map("integrations")
}

// E-commerce Tables: Products, Customers & Orders

model Product {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id") @db.Uuid
  sku       String
  name      String
  stock     Int      @default(0)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sku])
  @@index([sku])
  @@map("products")
}

model Customer {
  id         Int      @id @default(autoincrement())
  totalOrder Int      @default(0) @map("total_order")
  userId     String   @map("user_id") @db.Uuid
  name      String
  email     String   @unique
  phone     String?
  address   Json?
  source    String   @default("manual")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@index([email])
  @@index([totalOrder])
  @@map("customers")
}

model Order {
  id              Int      @id @default(autoincrement())
  integrationId   Int      @map("integration_id")
  customerId      Int      @map("customer_id")
  externalOrderId String   @map("external_order_id")
  status          String
  totalAmount     Decimal  @db.Decimal(10, 2) @map("total_amount")
  orderCreatedAt  DateTime @map("order_created_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  integration Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  customer    Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  crmLead     CrmLead?

  @@unique([integrationId, externalOrderId])
  @@index([integrationId])
  @@index([customerId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  orderId      Int     @map("order_id")
  productSku   String  @map("product_sku")
  productName  String  @map("product_name")
  quantity     Int
  pricePerUnit Decimal @db.Decimal(10, 2) @map("price_per_unit")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productSku])
  @@map("order_items")
}

// CRM Tables: Leads & Activities

model CrmLead {
  id             Int      @id @default(autoincrement())
  orderId        Int?     @unique @map("order_id")
  userId         String   @map("user_id") @db.Uuid
  name           String?
  email          String?
  phone          String?
  source         String
  logisticStatus String?  @map("logistic_status")
  codStatus      String?  @map("cod_status")
  kpiStatus      String?  @map("kpi_status")
  notes          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  order  Order?         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  events CrmLeadEvent[]
  tags   CrmLeadTag[]

  @@index([userId])
  @@index([email])
  @@index([logisticStatus])
  @@index([codStatus])
  @@index([kpiStatus])
  @@map("crm_leads")
}

model CrmLeadEvent {
  id        Int      @id @default(autoincrement())
  leadId    Int      @map("lead_id")
  userId    String   @map("user_id") @db.Uuid
  type      String
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  lead CrmLead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@map("crm_lead_events")
}

model CrmTag {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  color String?

  // Relations
  leads CrmLeadTag[]

  @@index([name])
  @@map("crm_tags")
}

model CrmLeadTag {
  leadId Int @map("lead_id")
  tagId  Int @map("tag_id")

  // Relations
  lead CrmLead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tag  CrmTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([leadId, tagId])
  @@map("crm_lead_tags")
}
