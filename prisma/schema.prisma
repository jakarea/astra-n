// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core Tables: Users & Integrations

model User {
  id               String   @id @db.Uuid
  name             String
  email            String?  @unique
  role             String   @default("seller") // 'admin' or 'seller'
  accountStatus    String   @default("pending") @map("account_status") // 'pending', 'approved', 'rejected', 'suspended'
  approvedAt       DateTime? @map("approved_at")
  approvedBy       String?  @map("approved_by") @db.Uuid
  rejectionReason  String?  @map("rejection_reason")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  settings           UserSettings?
  integrations       Integration[]
  products           Product[] // Products created by this user (admin)
  customers          Customer[]
  orders             Order[]
  crmLeads           CrmLead[]
  leadEvents         CrmLeadEvent[]
  assignedProducts   SellerProduct[] @relation("SellerProducts") // Products assigned to this seller
  productAssignments SellerProduct[] @relation("ProductAssignments") // Assignments made by this admin
  telegramJobs       TelegramJob[] // Background job queue for Telegram notifications

  @@index([role])
  @@index([accountStatus])
  @@index([createdAt])
  @@map("users")
}

model UserSettings {
  userId           String   @id @map("user_id") @db.Uuid
  telegramChatId   String?  @map("telegram_chat_id")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Integration {
  id               Int      @id @default(autoincrement())
  userId           String   @map("user_id") @db.Uuid
  name             String
  type             String   // 'shopify', 'woocommerce', 'wordpress'
  domain           String   @unique
  baseUrl          String?  @map("base_url")
  webhookSecret    String?  @map("webhook_secret")
  adminAccessToken String?  @map("admin_access_token")
  isActive         Boolean  @default(true) @map("is_active")
  status           String   @default("active") // 'active', 'inactive', 'error'
  lastSyncAt       DateTime? @map("last_sync_at")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@index([userId])
  @@index([domain])
  @@index([type])
  @@index([status])
  @@map("integrations")
}

// E-commerce Tables: Products, Customers & Orders

model Product {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id") @db.Uuid // Creator/Admin who created the product
  sku       String
  name      String
  stock     Int      @default(0)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sellerProducts SellerProduct[] // Products assigned to sellers

  @@unique([userId, sku])
  @@index([sku])
  @@map("products")
}

// Pivot table to assign products to sellers
model SellerProduct {
  sellerId   String   @map("seller_id") @db.Uuid
  productId  Int      @map("product_id")
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp(3)
  assignedBy String   @map("assigned_by") @db.Uuid // Admin who made the assignment

  // Relations with explicit constraint names
  seller   User    @relation("SellerProducts", fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "seller_products_seller_id_fkey")
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "seller_products_product_id_fkey")
  assigner User    @relation("ProductAssignments", fields: [assignedBy], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "seller_products_assigned_by_fkey")

  @@id([sellerId, productId], map: "seller_products_pkey")
  @@index([sellerId], map: "idx_seller_products_seller_id")
  @@index([productId], map: "idx_seller_products_product_id")
  @@index([assignedBy], map: "idx_seller_products_assigned_by")
  @@map("seller_products")
}

model Customer {
  id         Int      @id @default(autoincrement())
  totalOrder Int      @default(0) @map("total_order")
  userId     String   @map("user_id") @db.Uuid
  name      String
  email     String
  phone     String?
  address   Json?
  source    String   @default("manual")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@unique([userId, email])
  @@index([email])
  @@index([totalOrder])
  @@map("customers")
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          String   @map("user_id") @db.Uuid
  integrationId   Int      @map("integration_id")
  customerId      Int      @map("customer_id")
  externalOrderId String   @map("external_order_id")
  status          String
  totalAmount     Decimal  @db.Decimal(10, 2) @map("total_amount")
  orderCreatedAt  DateTime @map("order_created_at")
  trackingId      String?  @map("tracking_id")
  trackingSlug    String?  @map("tracking_slug")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  integration Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  customer    Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  crmLead     CrmLead?
  telegramJobs TelegramJob[] // Background job queue for Telegram notifications

  @@unique([integrationId, externalOrderId])
  @@index([userId])
  @@index([integrationId])
  @@index([customerId])
  @@index([status])
  @@index([trackingId])
  @@map("orders")
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  orderId      Int     @map("order_id")
  productSku   String  @map("product_sku")
  productName  String  @map("product_name")
  quantity     Int
  pricePerUnit Decimal @db.Decimal(10, 2) @map("price_per_unit")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productSku])
  @@map("order_items")
}

// CRM Tables: Leads & Activities

model CrmLead {
  id             Int      @id @default(autoincrement())
  orderId        Int?     @unique @map("order_id")
  userId         String   @map("user_id") @db.Uuid
  name           String?
  email          String?
  phone          String?
  source         String
  logisticStatus String?  @map("logistic_status")
  codStatus      String?  @map("cod_status")
  kpiStatus      String?  @map("kpi_status")
  notes          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  order  Order?         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  events CrmLeadEvent[]
  tags   CrmLeadTag[]

  @@index([userId])
  @@index([email])
  @@index([logisticStatus])
  @@index([codStatus])
  @@index([kpiStatus])
  @@map("crm_leads")
}

model CrmLeadEvent {
  id        Int      @id @default(autoincrement())
  leadId    Int      @map("lead_id")
  userId    String   @map("user_id") @db.Uuid
  type      String
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  lead CrmLead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@map("crm_lead_events")
}

model CrmTag {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  color String?

  // Relations
  leads CrmLeadTag[]

  @@index([name])
  @@map("crm_tags")
}

model CrmLeadTag {
  leadId Int @map("lead_id")
  tagId  Int @map("tag_id")

  // Relations
  lead CrmLead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tag  CrmTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([leadId, tagId])
  @@map("crm_lead_tags")
}

// Background Job Queue Tables

model TelegramJob {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id") @db.Uuid
  orderId    Int      @map("order_id")
  orderData  Json     @map("order_data")
  status     String   @default("pending") // 'pending', 'processing', 'completed', 'failed'
  attempts   Int      @default(0)
  maxAttempts Int    @default(3) @map("max_attempts")
  error      String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId])
  @@index([orderId])
  @@index([createdAt])
  @@map("telegram_jobs")
}
